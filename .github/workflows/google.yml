name: "Build and Push to Artifact Registry"

on:
  push:
    branches:
      - "main"
      - "qa"

env: # Define static environment variables here
  IMAGE: "static-site"

jobs:
  setup-build-publish:
    name: "Setup, Build, and Publish to Artifact Registry"
    runs-on: "ubuntu-latest"
    environment: "qa"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      # Configure Workload Identity Federation and generate an access token.
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT }}"

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: "Docker Auth"
        uses: "docker/login-action@v2"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.token }}"
          registry: "${{ secrets.GAR_LOCATION }}-docker.pkg.dev"

      # Set branch-specific environment variables
      - name: "Set branch-specific environment variables"
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "BRANCH=main" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/qa" ]]; then
            echo "BRANCH=qa" >> $GITHUB_ENV
          fi

      # Build the Docker image
      - name: "Build and push Docker container"
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          REPOSITORY: ${{ secrets.REPOSITORY }}
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}-${BRANCH}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"
